/*
22:神奇的幻方
查看 提交 统计 提问
总时间限制: 1000ms 内存限制: 65535kB
描述
幻方是一个很神奇的N*N矩阵，它的每行、每列与对角线，加起来的数字和都是相同的。
我们可以通过以下方法构建一个幻方。（阶数为奇数）
1.第一个数字写在第一行的中间
2.下一个数字，都写在上一个数字的右上方：
    a.如果该数字在第一行，则下一个数字写在最后一行，列数为该数字的右一列
    b.如果该数字在最后一列，则下一个数字写在第一列，行数为该数字的上一行
    c.如果该数字在右上角，或者该数字的右上方已有数字，则下一个数字写在该数字的下方

输入
一个数字N（N<=20）
输出
按上方法构造的2N-1 * 2N-1的幻方

*/

#include <iostream>

using namespace std;

int A[100][100];

int main()
{
    int N;
    cin>>N;
    int k=1;
    int i=0,j=0;
    while(1)
    {
        if(k==(2*N-1)*(2*N-1)+1)
            break;
        if(k==1)
        {
            i=0;
            j=N-1;
            A[i][j] = k++;
        }
        else
        {
            if(i==0&&j+1<2*N-1)//第一行
            {
                i = 2*N-2;
                j = j+1;
                A[i][j]=k++;
            }
            else if((i==0&&j==2*N-2&&i+1<2*N-1)||(i-1>=0&&j+1<=2*N-2&&i+1<=2*N-2&&A[i-1][j+1]!=0))
            {
                i = i+1;
                j=j;
                A[i][j] = k++;
            }
            else if(j==2*N-2&&i-1>=0)//最后一列
            {
                i = i-1;
                j = 0;
                A[i][j] = k++;
            }
            else if(i-1>=0&&j+1<=2*N-2)
            {
                i = i-1;
                j = j+1;
                A[i][j] = k++;
            }
        }
    }
    for(int i=0;i<2*N-1;i++)
    {
        for(int j=0;j<2*N-1;j++)
        {
            cout<<A[i][j]<<" ";
        }
        cout<<endl;
    }

    return 0;
}
